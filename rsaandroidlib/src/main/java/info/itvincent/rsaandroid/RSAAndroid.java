package info.itvincent.rsaandroid;

import android.util.Base64;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.PublicKey;
import java.security.Security;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;

/**
 * Encryption and decryption for rsa
 *
 * @author zhongyongsheng
 */

public class RSAAndroid {

    public static String KEY_ALGORITHM = "RSA";
    public static String RSA_ALGORITHM = "RSA/ECB/PKCS1Padding"; //RSA/ECB/PKCS1Padding  //RSA/ECB/NoPadding  //RSA/None/OAEPWithSHA1AndMGF1Padding
    public static String BEGIN_PUBLIC_KEY = "-----BEGIN PUBLIC KEY-----\n";
    public static String END_PUBLIC_KEY = "-----END PUBLIC KEY-----";
    public static String BEGIN_RSA_PRIVATE_KEY = "-----BEGIN RSA PRIVATE KEY-----\n";
    public static String END_RSA_PRIVATE_KEY = "-----END RSA PRIVATE KEY-----";
    public static String PROVIDER = "BC";
    public static boolean DEBUG = true;

    /**
     * the pem file string generated by openssl convert to public key
     * @param value
     * @return
     * @throws RSAException
     */
    public static PublicKey openSSLPemStringToPublicKey(String value) throws RSAException {
        if (value == null) return null;
        value = value.replace(BEGIN_PUBLIC_KEY, "");
        value = value.replace(END_PUBLIC_KEY, "");
        return base64StringToPublicKey(value);
    }

    /**
     * base64 string convert to public key
     * @param value
     * @return
     * @throws RSAException
     */
    public static PublicKey base64StringToPublicKey(String value) throws RSAException {


        return null ;
    }

    /**
     * byte[] convert to public key
     * @param value
     * @return
     * @throws RSAException
     */
    public static PublicKey bytesToPublicKey(byte[] value) throws RSAException {
        try {
            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM , PROVIDER) ;
            X509EncodedKeySpec oX509EncodedKeySpec = new X509EncodedKeySpec(value);
            return keyFactory.generatePublic(oX509EncodedKeySpec);
        } catch (Exception e) {
            throw new RSAException(e);
        }
    }


    /**
     * the pem file string generated by openssl convert to private key
     * @param value
     * @return
     * @throws RSAException
     */
    public static PrivateKey openSSLPemStringToPrivateKey(String value) throws RSAException {
        if (value == null) return null;
        value = value.replace(BEGIN_RSA_PRIVATE_KEY, "");
        value = value.replace(END_RSA_PRIVATE_KEY, "");
        return base64StringToPrivateKey(value);
    }

    /**
     * base64 string convert to private key
     * @param value
     * @return
     * @throws RSAException
     */
    public static PrivateKey base64StringToPrivateKey(String value) throws RSAException {
        try {
            byte[] keyBytes = Base64.decode(value, Base64.DEFAULT);
            return bytesToPrivateKey(keyBytes);
        } catch (Exception e) {
            throw new RSAException(e);
        }
    }

    /**
     * byte[] convert to private key
     * @param value
     * @return
     * @throws RSAException
     */
    public static PrivateKey bytesToPrivateKey(byte[] value) throws RSAException {
        try {
            KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(value);
            return keyFactory.generatePrivate(pkcs8EncodedKeySpec);
        } catch (Exception e) {
            throw new RSAException(e);
        }
    }


    /**
     * encode value used the public key string generated by openssl
     * @param value
     * @param publicKey
     * @return
     * @throws RSAException
     */
    public static byte[] encode(byte[] value, String publicKey) throws RSAException {
        PublicKey key = openSSLPemStringToPublicKey(publicKey);
        return encode(value, key);
    }

    /**
     * encode value used the PublicKey
     * @param value
     * @param publicKey
     * @return
     * @throws RSAException
     */
    public static byte[] encode(byte[] value, PublicKey publicKey) throws RSAException {
        try {
            Provider provider = Security.getProvider(PROVIDER);
            Cipher cipher = Cipher.getInstance(RSA_ALGORITHM, provider);
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            if (DEBUG) printCipher(cipher);
            return segmentProcess(cipher, value, cipher.getBlockSize());
        } catch (Exception e) {
            throw new RSAException(e);
        }
    }

    /**
     * decode value used the public key string generated by openssl
     * @param value
     * @param privateKey
     * @return
     * @throws RSAException
     */
    public static byte[] decode(byte[] value, String privateKey) throws RSAException {
        PrivateKey key = openSSLPemStringToPrivateKey(privateKey);
        return decode(value, key);
    }

    /**
     * decode value used the PrivateKey
     * @param value
     * @param privateKey
     * @return
     * @throws RSAException
     */
    public static byte[] decode(byte[] value, PrivateKey privateKey) throws RSAException {
        try {
            Provider provider = Security.getProvider(PROVIDER);
            Cipher cipher = Cipher.getInstance(RSA_ALGORITHM, provider);
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            if (DEBUG) printCipher(cipher);
            return segmentProcess(cipher, value, cipher.getBlockSize());



        } catch (Exception e) {
            throw new RSAException(e);
        }
    }

    private static byte[] segmentProcess(Cipher cipher, byte[] data, int segmentLength) throws RSAException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            int inputLength = data.length;
            int offset = 0;
            int i = 0;

            while (inputLength - offset > 0) {
                byte[] cache;
                if (inputLength - offset > segmentLength) {
                    cache = cipher.doFinal(data, offset, segmentLength);
                } else {
                    cache = cipher.doFinal(data, offset, inputLength - offset);
                }
                baos.write(cache, 0, cache.length);
                i++;
                offset = i * segmentLength;
            }
            data = baos.toByteArray();
            return data;
        } catch (Exception e) {
            throw new RSAException(e);
        } finally {
            try {
                baos.close();
            } catch (IOException e) {
            }
        }
    }

    private static void printCipher(Cipher cipher) {
        StringBuilder sb = new StringBuilder(512);
        sb.append("Cipher[{Provider:{name:")
                .append(cipher.getProvider().getName())
                .append(",version:").append(cipher.getProvider().getVersion())
                .append(",info:").append(cipher.getProvider().getInfo())
                .append("}")
                .append(",{BlockSize:")
                .append(cipher.getBlockSize())
                .append("}")
                .append("}]");
        Log.i("RSAAndroid", sb.toString());
    }
}
